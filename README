SObjectizer is an in-process message dispatching framework with implementation
of Actor Model, Publish-Subscribe Model and CSP-like channels.

SObjectizer allows the creation of a concurrent app as a set of agent-objects
which interact with each other through asynchronous messages. It handles
message dispatching and provides a working context for message processing. And
allows to tune those things by supplying various ready-to-use dispatchers.

Obtaining and building
======================

SObjectizer can be downloaded from SourceForge[1] as an archive or
exported/checkedout from Subversion repository.

There are two ways for building SObjectizer. The first one by using Mxx_ru[2]
tool. The second one by using CMake[3].

NOTE. Since v.5.5.15.2 there is a support of Android platform.  Building for
Android is possible by CMake only. See the corresponding section below.

SObjectizer can also be installed and used via vcpkg and Conan dependency
managers. See the appropriate sections below.

Building via Mxx_ru
===================

NOTE. This is a standard way for building SObjectizer. This way is used in
SObjectizer development process.

To build SObjectizer it is necessary to use Ruby language and Mxx_ru tool.
Install Ruby and then install Mxx_ru via RubyGems command:

  gem install Mxx_ru

If you already have Mxx_ru installed please update to at least version 1.6.11:

  gem update Mxx_ru

SObjectizer can be obtained from Subversion repository on SourceForge:

  svn export http://svn.code.sf.net/p/sobjectizer/repo/tags/so_5/5.5.24 so-5.5.24

To build SObjectizer:

  cd so-5.5.24/dev
  ruby build.rb

Static and shared library for SObjectizer will be built. Libraries will be
placed into target/release subdirectory.

If you want to build just shared library:

  cd so-5.5.24/dev
  ruby so_5/prj.rb

Or if you want to build just static library:

  cd so-5.5.24/dev
  ruby so_5/prj_s.rb

To build SObjectizer with all tests and samples:

  cd so-5.5.24/dev
  ruby build_all.rb

Please note that under FreeBSD it could be necessary to define LD_LIBRARY_PATH
environment variable. And the actual build command sequence under FreeBSD could
be as follows:

  cd so-5.5.24/dev
  export LD_LIBRARY_PATH=target/release
  ruby build_all.rb

To build html-format documentation for SObjectizer the Doxygen tool is
necessary. If it is installed then:

  cd so-5.5.24/doxygen
  doxygen

Generated html-files will be located in so-5.5.24/dev/doc/html.

NOTE. If you do not specify MXX_RU_CPP_TOOLSET by youself then Mxx_ru will
try to detect your C++ toolset automatically. If you want to use C++ compiler
which is not default in your system please define MXX_RU_CPP_TOOLSET
environment variable manually. It could look like:

  export MXX_RU_CPP_TOOLSET="clang_linux compiler_name=clang++-3.5 linker_name=clang++-3.5"

More information about tuning Mxx_ru for your needs you can find in the
corresponding documentation [4].

Building via CMake
==================

NOTE. This way of building is not used by SObjectizer developers. But
CMake-related files are in actual state, they maintained by SObjectizer Team
and can be used for building SObjectizer, its samples and tests.

NOTE. It is better to have a rather new version of CMake. The oldest CMake
version which has been tested is 3.2. The version 3.8 or newer is prefered.

To build SObjectizer via CMake it is necessary to have CMake and some knowledge
of how to use it. The following action is just a demonstration. For more 
detailed info about cmake build system for SObjectizer see
dev/cmake/CmakeQuickHowto.txt

To get and build SObjectizer under Linux/FreeBSD in command line run:

  svn export http://svn.code.sf.net/p/sobjectizer/repo/tags/so_5/5.5.24 so-5.5.24
  cd so-5.5.24
  mkdir cmake_build
  cd cmake_build
  cmake -DCMAKE_INSTALL_PREFIX=target -DCMAKE_BUILD_TYPE=Release ../dev
  cmake --build . --config Release
  cmake --build . --config Release --target install

Those commands will create all necessary Makefile, then build SObjectizer. If
it necessary to build examples and tests too, use

  cmake -DBUILD_ALL=ON -DCMAKE_INSTALL_PREFIX=target ../dev

When 'make install' finished './target' will contain two subfolders
'./bin' with samples and './lib' with shared libso.5.x.x.so

CMake build system currently supports this options:

  SOBJECTIZER_BUILD_STATIC   Enable building SObjectizer as a static library [default: ON]
  SOBJECTIZER_BUILD_SHARED   Enable building SObjectizer as a shared library [default: ON]

  BUILD_ALL      Enable building examples and tests [default: OFF]
  BUILD_EXAMPLES Enable building examples [default: OFF]
  BUILD_TESTS    Enable building tests    [default: OFF]

Please note that if BUILD_ALL or BUILD_EXAMPLES or BUILD_TESTS is turned ON
then both SOBJECTIZER_BUILD_STATIC and SOBJECTIZER_BUILD_SHARED must be turned
ON. It means that if SOBJECTIZER_BUILD_STATIC or SOBJECTIZER_BUILD_SHARED is
turned OFF then BUILD_ALL/BUILD_EXAMPLES/BUILD_TESTS all must be turned OFF.

To build SObjectizer under Windows by MS Visual Studio 2013 from command line:

  cd so-5.5.24
  mkdir cmake_build
  cd cmake_build
  cmake -DCMAKE_INSTALL_PREFIX=target -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 14 2015" ../dev
  cmake --build . --config Release
  cmake --build . --config Release --target install

If it necessary to build examples too, use BUILD_ALL in cmake invocation:

  cmake -DCMAKE_INSTALL_PREFIX=target -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -G "Visual Studio 14 2015" ../dev

Since v.5.5.24 SObjectizer provides sobjectizer-config.cmake files.
These files are automatically installed into <target>/lib/cmake/sobjectizer
subfolder. It allows to use SObjectizer via CMake's find_package command.

Building for Android
--------------------

Building for Android is possible via a rather fresh Android NDK or CrystaX NDK[5].

Building with Android NDK
~~~~~~~~~~~~~~~~~~~~~~~~~

You need Android SDK and Android NDK installed in your system. As well as an
appropriate version of CMake. You have also need properly set environment
variables ANDROID_HOME, ANDROID_NDK. Then you can issue the following commands:

  svn export http://svn.code.sf.net/p/sobjectizer/repo/tags/so_5/5.5.24 so-5.5.24
  cd so-5.5.24
  mkdir cmake_build
  cd cmake_build
  cmake -DBUILD_ALL -DCMAKE_INSTALL_PREFIX=target -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
        -G Ninja \
        -DANDROID_ABI=arm64-v8a \
        -DANDROID_NDK=${ANDROID_NDK} \
        -DANDROID_NATIVE_API_LEVEL=23 \
        -DANDROID_TOOLCHAIN=clang \
		  ../dev
  cmake --build . --config=Release
  cmake --build . --config=Release --target install

Building with CrystaX NDK
~~~~~~~~~~~~~~~~~~~~~~~~~

You need CrystaX NDK v.10.4.0 or higher already installed in your system. CMake
is used for building SObjectizer:

  svn export http://svn.code.sf.net/p/sobjectizer/repo/tags/so_5/5.5.24 so-5.5.24
  cd so-5.5.24
  mkdir cmake_build
  cd cmake_build
  export NDK=/path/to/the/crystax-ndk
  cmake -DBUILD_ALL -DCMAKE_INSTALL_PREFIX=result -DCMAKE_TOOLCHAIN_FILE=$NDK/cmake/toolchain.cmake -DANDROID_ABI=arm64-v8a ../dev
  make
  make test
  make install

Using C++ Dependency Managers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using via vcpkg
---------------

To use SObjectizer via [vcpkg](https://github.com/Microsoft/vcpkg) it is necessary to do the following steps.

Install `sobjectizer` package:

    vcpkg install sobjectizer

Add the following lines into your CMakeLists.txt file:

    find_package(sobjectizer CONFIG REQUIRED)
    target_link_libraries(your_target sobjectizer::SharedLib) # or sobjectizer::StaticLib

Using via Conan
---------------

Installing SObjectizer And Adding It To conanfile.txt
`````````````````````````````````````````````````````

To use SObjectizer via Conan it is necessary to do the following steps:

Add the corresponding remote to your conan:

    conan remote add stiffstream https://api.bintray.com/conan/stiffstream/public

Add SObjectizer to `conanfile.txt` of your project:

    [requires]
    sobjectizer/5.5.24@stiffstream/testing

It also may be necessary to specify `shared` option for SObjectizer. For example, for build SObjectizer as a static library:

    [options]
    sobjectizer:shared=False

Install dependencies for your project:

    conan install SOME_PATH --build=missing

Adding SObjectizer To Your CMakeLists.txt
`````````````````````````````````````````

Please note that SObjectizer should be added to your `CMakeLists.txt` via `find_package` command:

    ...
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup()

    find_package(sobjectizer CONFIG REQUIRED)
    ...
    target_link_libraries(your_target sobjectizer::SharedLib) # Or sobjectizer::StaticLib

License
=======

SObjectizer is distributed under 3-clause BSD license. For license information
please see LICENSE file.

References
==========

[1] https://sourceforge.net/projects/sobjectizer/files/sobjectizer/SObjectizer%20Core%20v.5.5/
[2] https://sourceforge.net/projects/mxxru/
[3] http://www.cmake.org/
[4] http://sourceforge.net/projects/mxxru/files/Mxx_ru%201.6/mxx_ru-1.6.4-r1.pdf/download
[5] https://www.crystax.net/android/ndk 
